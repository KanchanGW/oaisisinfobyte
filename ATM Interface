import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

// Main class to run the ATM system
public class ATM {
    private static final Scanner scanner = new Scanner(System.in);
    private static final Bank bank = new Bank();

    public static void main(String[] args) {
        // Add some test users
        bank.addUser(new User("Kavya Sharma", "9658", 100000));
        bank.addUser(new User("Kirti Gupta", "7542", 20000));

        User currentUser = null;
        while (currentUser == null) {
            System.out.print("Enter User ID: ");
            String userId = scanner.nextLine();
            System.out.print("Enter PIN: ");
            String pin = scanner.nextLine();

            currentUser = bank.authenticate(userId, pin);
            if (currentUser == null) {
                System.out.println("Invalid credentials, try again.");
            }
        }

        boolean running = true;
        while (running) {
            System.out.println("\nATM Menu:");
            System.out.println("1. Transaction History");
            System.out.println("2. Withdraw");
            System.out.println("3. Deposit");
            System.out.println("4. Transfer");
            System.out.println("5. Quit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // consume newline

            switch (choice) {
                case 1 -> displayTransactionHistory(currentUser);
                case 2 -> withdraw(currentUser);
                case 3 -> deposit(currentUser);
                case 4 -> transfer(currentUser);
                case 5 -> {
                    System.out.println("Thank you for using the ATM. Goodbye!");
                    running = false;
                }
                default -> System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private static void displayTransactionHistory(User user) {
        TransactionHistory history = user.getTransactionHistory();
        List<Transaction> transactions = history.getTransactions();
        if (transactions.isEmpty()) {
            System.out.println("No transactions found.");
        } else {
            System.out.println("Transaction History:");
            for (Transaction t : transactions) {
                System.out.println(t);
            }
        }
    }

    private static void withdraw(User user) {
        System.out.print("Enter amount to withdraw: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // consume newline
        if (user.withdraw(amount)) {
            System.out.println("Withdrawal successful.");
        } else {
            System.out.println("Insufficient funds or invalid amount.");
        }
    }

    private static void deposit(User user) {
        System.out.print("Enter amount to deposit: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // consume newline
        user.deposit(amount);
        System.out.println("Deposit successful.");
    }

    private static void transfer(User user) {
        System.out.print("Enter recipient User ID: ");
        String recipientId = scanner.nextLine();
        User recipient = bank.getUser(recipientId);
        if (recipient == null) {
            System.out.println("Recipient not found.");
            return;
        }

        System.out.print("Enter amount to transfer: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // consume newline
        if (user.transfer(recipient, amount)) {
            System.out.println("Transfer successful.");
        } else {
            System.out.println("Insufficient funds or invalid amount.");
        }
    }
}

// Class to represent a user
class User {
    private final String id;
    private final String pin;
    private double balance;
    private final TransactionHistory transactionHistory;

    public User(String id, String pin, double balance) {
        this.id = id;
        this.pin = pin;
        this.balance = balance;
        this.transactionHistory = new TransactionHistory();
    }

    public String getId() {
        return id;
    }

    public boolean validatePin(String pin) {
        return this.pin.equals(pin);
    }

    public boolean withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            transactionHistory.addTransaction(new Transaction("Withdraw", amount));
            return true;
        }
        return false;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            transactionHistory.addTransaction(new Transaction("Deposit", amount));
        }
    }

    public boolean transfer(User recipient, double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            recipient.deposit(amount);
            transactionHistory.addTransaction(new Transaction("Transfer to " + recipient.getId(), amount));
            return true;
        }
        return false;
    }

    public TransactionHistory getTransactionHistory() {
        return transactionHistory;
    }
}

// Class to represent a transaction
class Transaction {
    private final String type;
    private final double amount;

    public Transaction(String type, double amount) {
        this.type = type;
        this.amount = amount;
    }

    @Override
    public String toString() {
        return type + ": $" + amount;
    }
}

// Class to manage transaction history
class TransactionHistory {
    private final List<Transaction> transactions;

    public TransactionHistory() {
        transactions = new ArrayList<>();
    }

    public void addTransaction(Transaction transaction) {
        transactions.add(transaction);
    }

    public List<Transaction> getTransactions() {
        return transactions;
    }
}

// Class to manage users
class Bank {
    private final Map<String, User> users;

    public Bank() {
        users = new HashMap<>();
    }

    public void addUser(User user) {
        users.put(user.getId(), user);
    }

    public User authenticate(String id, String pin) {
        User user = users.get(id);
        if (user != null && user.validatePin(pin)) {
            return user;
        }
        return null;
    }

    public User getUser(String id) {
        return users.get(id);
    }
}
